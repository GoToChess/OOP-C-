

//I had to add this to the

//returns 1 if king is in checkmate and 0 otherwise
int Rules::checkmate(char kingcolour, Piece Matrix[8][8])
{
	int king_x=0, king_y=0;
	//find king
	for (int i = 0; i < 8; i++)
	{
		for (int j = 0; j < 8; j++)
		{
			if (Matrix[i][j].getColour() == kingcolour && Matrix[i][j].getType() == 'K')
			{
				king_x = i;
				king_y = j;
			}
		}
	}

	//check if he is allowed to move to any square around him
	int a = moveLegal(king_x, king_y, king_x + 1, king_y, Matrix);
	int b = moveLegal(king_x, king_y, king_x + 1, king_y + 1, Matrix);
	int c = moveLegal(king_x, king_y, king_x + 1, king_y - 1, Matrix);

	int d = moveLegal(king_x, king_y, king_x, king_y-1, Matrix);
	int e = moveLegal(king_x, king_y, king_x, king_y+1, Matrix);

	int f = moveLegal(king_x, king_y, king_x-1, king_y-1, Matrix);
	int g = moveLegal(king_x, king_y, king_x-1, king_y, Matrix);
	int h = moveLegal(king_x, king_y, king_x-1, king_y+1, Matrix);


	if he can't move to any square around him & he is also in check, that is checkmate
	if ((a == 0 && b == 0 && c == 0 && d == 0 && e == 0 && f == 0 && g == 0 && h == 0) && (incheck(kingcolour, Matrix) == 1)) return 1;
	else return 0;


}